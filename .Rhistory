altura <- abs(round(rnorm(n, 1.7, 0.05), 2))
summary(altura)
hist(idade,
hist(idade,
ylab = 'frequência',
hist(idade,
hist(idade,
main = 'histograma da idade',
ylab = 'frequência',
xlab = 'idade (em anos completos)’
)
altura <- abs(round(rnorm(n, 1.7, 0.05), 2))
summary(altura)
hist(idade,
main = 'histograma da idade',
hist(idade,
main = 'histograma da idade' ,
ylab = 'frequência' ,
xlab = 'idade (em anos completos)’
)
altura <- abs(round(rnorm(n, 1.7, 0.05), 2))
summary(altura)
hist(idade,
main = 'histograma da idade' ,
hist(idade,
main = 'histograma da idade' ,
ylab = 'frequência' ,
xlab = 'idade (em anos completos)'
)
altura <- abs(round(rnorm(n, 1.7, 0.05), 2))
summary(altura)
peso <- abs(round(rnorm(n, 75, 3.5), 2))
summary(peso)
imc <- round(peso / altura**2, 2)
summary(imc)
hist(imc, main='imc', ylab='freq', xlab='imc')
par(mfrow=c(2,2))
hist(idade, main='idade', ylab='freq', xlab='idade')
hist(altura, main='altura', ylab='freq', xlab='altura')
hist(peso, main='peso', ylab='freq', xlab='peso')
hist(imc, main='imc', ylab='freq', xlab='imc')
hist_idade <- hist(idade)
str(hist_idade)
hist_idade
hist(idade, breaks = 100)
par(mfrow=c(2,2))
hist(idade, breaks = 2)
hist(idade, breaks = 10)
hist(idade, breaks = 30)
hist(idade, breaks = 100)
text(h$mids, h$counts, labels=h$counts, adj=c(0.5, -0.5))
h <- hist(idade, ylim=c(0, 6000))
text(h$mids, h$counts, labels=h$counts, adj=c(0.5, -0.5))
salario <- abs(round(rnorm(n, 3000, 400), 2))
summary(salario)
pop.carros <- rep(c(0,1,2,3), p)
carros <- sample(pop.carros, n)
rm(pop.carros) #não vamos mais precisar dessa variável
table(carros)
pop.filhos <- rep(c(0,1,2), p)
filhos <- sample(pop.filhos, n)
rm(pop.filhos)
table(filhos)
par(mfrow=c(1,2))
hist(carros)
hist(filhos)
pop.esc <- rep(c(0,1,2,3,4,5,6), p)
esc.temp <- sample(pop.esc, n)
esc <- factor(esc.temp,
+ levels=c(0,1,2,3,4,5,6),
str(esc)
esc <- factor(esc.temp,
levels=c(0,1,2,3,4,5,6),
labels=c('analfabeto','1grau','2grau','3grau','msc','doc','posdoc'),
ordered=TRUE)
str(esc)
table(esc)
fumante.n <- rbinom(n, 1, 0.40)
fumante.f <- factor(fumante.n,
+ levels=c(0,1),
fumante.n <- rbinom(n, 1, 0.40)
fumante.f <- factor(fumante.n,
levels=c(0,1),
labels=c('não','sim'),
ordered=TRUE)
str(fumante.f)
table(fumante.f)
mean(fumante.n)
pop.sexo <- rep(c(1,2), p)
sexo.temp <- sample(pop.sexo, n)
sexo <- factor(sexo.temp,
levels=c(1,2),
labels=c('m', 'f'),
ordered=FALSE)
sexo <- factor(sexo.temp,
levels=c(1,2),
labels=c('m', 'f'),
ordered=FALSE)
str(sexo)
table(sexo)
pop.prof <- rep(0:2, p)
prof.temp <- sample(pop.prof, n)
prof <- factor(prof.temp,
levels=c(0,1,2),
labels=c('humanas','exatas','bio'),
ordered=FALSE)
str(prof)
table(prof)
df <- data.frame(id = 1:n,altura,peso,imc,sexo,esc,prof,
+ fumante.f, fumante.n, salario, carros, filhos, idade)
df <- data.frame(id = 1:n,altura,peso,imc,sexo,esc,prof,
fumante.f, fumante.n, salario, carros, filhos, idade)
str(df)
cor(df$peso, df$imc)
x <- c(36, 82, 45, 49 , 21 ,24 ,58 ,73 ,85 ,52)
y <- c(6, 14, 5 , 13, 5, 8,14,11,18,6)
plot(x,y)
summary(x,y)
abline(x,y)
plot(x,y)
abline(plot(x,y))
abline(lm(x ~ y))
plot(x,y)
plot(x,y)
summary(x,y)
abline(lm(x ~ y))
abline(x ~ y)
plot(x ~ y)
plot(x ~ y)
linha = lm(x ~ y)
summary(x,y)
abline(x ~ y)
plot(x ~ y)
abline(x ~ y)
abline(linha)
abline(linha)
summary(x,y)
summary(linha)
# Dados
precipitacao <- c(12.9, 7.2, 11.3, 18.6, 8.8, 10.3, 15.9, 13.1)
safra <- c(62.5, 28.7, 52.2, 80.6, 41.6, 44.5, 71.3, 54.4)
precipitacao <- c(12.9, 7.2, 11.3, 18.6, 8.8, 10.3, 15.9, 13.1)
safra <- c(62.5, 28.7, 52.2, 80.6, 41.6, 44.5, 71.3, 54.4)
modelo <- lm(safra ~ precipitacao)
summary(modelo)
valores <- data.frame(precipitacao = c(9.5,17.1,6.8))
predict(modelo, valores)
plot(safra ~ precipitacao,
main = "Safra de trigo e precipitações",
xlab = "Precipitação"
ylab = "Safra")
plot(safra ~ precipitacao,
main = "Safra de trigo e precipitações",
xlab = "Precipitação",
ylab = "Safra")
abline(modelo)
notas <- c(8, 7, 9, 6, 10)
media <- mean(notas)
desvio <- sd(notas)
media; desvio
desvio;
media;
media
desvio
horas <- c(2, 3, 4, 5, 6)
notas <- c(5, 6, 7, 8, 9)
modelo <- lm(notas ~ horas)
summary(modelo)
set.seed(20)
notas <- data.frame(
Matricula = sample(x = 11475:12990, size = 30, replace = FALSE),
ac1 = sample(x = 1:10, size = 30, replace = TRUE),
ac2 = sample(x = 1:10, size = 30, replace = TRUE),
prova_final = sample(x = 1:10, size = 30, replace = TRUE)
)
notas$media <- (notas$ac1 * 0.4) + (notas$ac2 * 0.4) + (notas$prova_final * 0.2)
notas$status <- ifelse(notas$media >= 7, "Aprovado", "Reprovado")
aprovados <- subset(notas, status == "Aprovado")
head(aprovados)
aprovados
taxa_aprov <- (nrow(aprovados) / nrow(notas)) * 100
taxa_aprov
disciplinas <- c("Matemática", "Estatística", "TI")
medias <- c(8.5, 7.2, 9.0)
plot(medias,
names.arg = disciplinas,
col = c("skyblue", "lightgreen", "orange"),
main = "Médias por Disciplina",
ylab = "Média")
plot(horas, notas,
main="Relação entre Horas de Estudo e Nota",
xlab="Horas de Estudo",
ylab="Nota",
pch=19, col="blue")
horas <- c(2, 3, 4, 5, 6)
notas <- c(5, 6, 7, 8, 9)
modelo <- lm(notas ~ horas)
plot(horas, notas,
main="Relação entre Horas de Estudo e Nota",
xlab="Horas de Estudo",
ylab="Nota",
pch=19, col="blue")
abline(modelo, col="red", lwd=2)
barplot(aprovados$media,
col="lightgreen",
main="Desempenho dos Alunos Aprovados",
ylab="Média Final")
taxa_aprov
quadro1 <- data.frame(
Vendedor = c("Ana", "Flavia", "Pedro", "Mariana", "Ana", "Flavia", "Pedro", "Mariana"),
Dia = c(1,1,1,1,2,2,2,2),
Produto = c("saia", "casaco", "vestido", "meia", "calçaFlare", "calçaSkinny", "calçaSkinny", "manta"),
Quantidade = c(1,2,1,5,3,0,3,4)
)
quadro2 <- data.frame(
Produto = c("calça", "vestido", "blusa", "manta", "saia", "casaco", "meia"),
Preco_Unitario = c(240, 320, 98, 69, 145, 289, 39),
Custo_Unitario = c(210, 160, 90, 35, 60, 144, 15)
)
quadro1$Produto <- gsub("calçaFlare", "calça", quadro1$Produto)
quadro1$Produto <- gsub("calçaSkinny", "calça", quadro1$Produto)
dados <- merge(quadro1, quadro2, by="Produto")
dados$Faturamento <- dados$Preco_Unitario * dados$Quantidade
dados$Lucro <- (dados$Preco_Unitario - dados$Custo_Unitario) * dados$Quantidade
print(dados)
faturamento_vendedor <- aggregate(Faturamento ~ Vendedor, data=dados, sum)
print(faturamento_vendedor)
barplot(faturamento_vendedor$Faturamento,
names.arg = faturamento_vendedor$Vendedor,
col = "skyblue",
main = "Faturamento Total por Vendedor",
xlab = "Vendedor",
ylab = "Faturamento (R$)")
valor1 <- readline("Digite o primeiro valor: ")
valor1 <- readline("Digite o primeiro valor: ")
valor2 <- readline("Digite o segundo valor: ")
if (is.na(as.numeric(valor1)) | is.na(as.numeric(valor2))) {
cat("Os valores tem que ser números. \n")
} else {
valor1 <- as.numeric(valor1)
valor2 <- as.numeric(valor2)
maior <- ifelse(valor1 > valor2, valor1, valor2)
cat("Maior valor:", maior, "\n")
}
set.seed(10)
vetorNumerico <- sample(x = 1:25, size = 800, replace = TRUE)
freq <- table(vetorNumerico)
print(freq)
set.seed(50)
vendas <- data.frame(
Qtd = sample(x = 28:52, size = 30, replace = TRUE),
DiaMes = seq(from = as.Date("2021-09-01"), to = as.Date("2021-09-30"), by = "day"),
DiaSemana = weekdays(seq(from = as.Date("2021-09-01"), to = as.Date("2021-09-30"), by = "day"))
)
# a) Gráfico de dispersão
plot(vendas$DiaMes, vendas$Qtd,
main = "Frequência da Qtd de Vendas",
xlab = "Dia",
ylab = "Qtd de Vendas",
pch = 19, col = "blue")
# b) Variação de vendas no mês
varmes <- max(vendas$Qtd) - min(vendas$Qtd)
cat("Variação de vendas:", varmes, "unidades\n")
# c) Média de vendas
medven <- round(mean(vendas$Qtd))
cat("Média de vendas:", medven, "unidades\n")
# d) Histograma
hist(vendas$Qtd,
main = "Frequência da Qtd de Vendas",
xlab = "Qtd de Vendas",
ylab = "Frequência",
col = "green")
vendas <- data.frame(
Qtd = sample(x = 28:52, size = 30, replace = TRUE),
DiaMes = seq(from = as.Date("2021-09-01"), to = as.Date("2021-09-30"), by = "day"),
DiaSemana = weekdays(seq(from = as.Date("2021-09-01"), to = as.Date("2021-09-30"), by = "day"))
)
plot(vendas$DiaMes, vendas$Qtd,
main = "Frequência da Qtd de Vendas",
xlab = "Dia",
ylab = "Qtd de Vendas",
pch = 19, col = "blue")
varmes <- max(vendas$Qtd) - min(vendas$Qtd)
cat("Variação de vendas:", varmes, "unidades\n")
medven <- round(mean(vendas$Qtd))
cat("Média de vendas:", medven, "unidades\n")
hist(vendas$Qtd,
main = "Frequência da Qtd de Vendas",
xlab = "Qtd de Vendas",
ylab = "Frequência",
col = "green")
x1 <- c(1, 2, 3, 4)
x2 <- seq(2, 11, by = 3)
x3 <- c("A", "B", "C", "D")
x4 <- c("a", "b", "c", "d")
x5 <- c("A", "C", "E", "G")
x6 <- seq(10, 7, by = -1)
x7 <- seq(10, 4, by = -2)
x8 <- rep(c(2, 5, 8), each = 4)
x9 <- list(x1, x2, x3, x4, x5, x6, x7, x8)
print(x9)
# Data atual e data de nascimento
x <- Sys.Date()              # data atual
y <- as.Date("2004-05-10")   # exemplo de data de nascimento
# Idade em dias
idade_dias <- as.numeric(x - y)
cat("Idade em dias:", idade_dias, "\n")
# Idade em anos (aprox.)
idade_anos <- floor(idade_dias / 365)
cat("Idade em anos:", idade_anos, "\n")
preco_final <- numeric(length(quadro1$Produto))
custo_final <- numeric(length(quadro1$Produto))
for (i in 1:length(quadro1$Produto)) {
nome_produto <- quadro1$Produto[i]
# verificar qual produto do quadro2 corresponde
indice <- grep(substr(nome_produto, 1, 4), quadro2$Produto)  # compara só os 4 primeiros caracteres
preco_final[i] <- quadro2$PrecoUnitario[indice]
custo_final[i] <- quadro2$CustoUnitario[indice]
}
# adicionar colunas
quadro1$PrecoUnitario <- preco_final
quadro1$CustoUnitario <- custo_final
# ====== Passo 2: Calcular faturamento e lucro ======
quadro1$Faturamento <- quadro1$PrecoUnitario * quadro1$Quantidade
quadro1$Lucro <- (quadro1$PrecoUnitario - quadro1$CustoUnitario) * quadro1$Quantidade
# ====== Passo 3: Faturamento total por vendedor ======
faturamento_vendedor <- tapply(quadro1$Faturamento, quadro1$Vendedor, sum)
# ====== Passo 4: Gráfico de barras ======
barplot(faturamento_vendedor,
main = "Faturamento total por vendedor",
xlab = "Vendedor",
ylab = "Faturamento (R$)",
col = "steelblue")
# ====== Passo 5: Visualizar resultado ======
print(quadro1)
print(faturamento_vendedor)
idade_dias <- as.numeric(x - y)
cat("Idade em dias:", idade_dias, "\n")
idade_anos <- floor(idade_dias / 365)
cat("Idade em anos:", idade_anos, "\n")
vendedor <- c("Ana", "Flavia", "Pedro", "Mariana", "Ana", "Flavia", "Pedro", "Mariana")
dia <- c(1, 1, 1, 1, 2, 2, 2, 2)
produto <- c("saia", "casaco", "vestido", "meia", "calçaFlare", "calçaSkinny", "calçaSkinny", "manta")
quantidade <- c(1, 2, 3, 5, 3, 0, 3, 4)
quadro1 <- data.frame(Vendedor = vendedor, Dia = dia, Produto = produto, Quantidade = quantidade)
produto2 <- c("calça", "vestido", "blusa", "manta", "saia", "casaco", "meia")
precoUnit <- c(240, 320, 98, 69, 145, 289, 39)
custoUnit <- c(210, 160, 60, 30, 89, 144, 15)
quadro2 <- data.frame(Produto = produto2, PrecoUnitario = precoUnit, CustoUnitario = custoUnit)
preco_final <- numeric(length(quadro1$Produto))
custo_final <- numeric(length(quadro1$Produto))
for (i in 1:length(quadro1$Produto)) {
nome_produto <- quadro1$Produto[i]
indice <- grep(substr(nome_produto, 1, 4), quadro2$Produto)
preco_final[i] <- quadro2$PrecoUnitario[indice]
custo_final[i] <- quadro2$CustoUnitario[indice]
}
quadro1$PrecoUnitario <- preco_final
quadro1$CustoUnitario <- custo_final
quadro1$Faturamento <- quadro1$PrecoUnitario * quadro1$Quantidade
quadro1$Lucro <- (quadro1$PrecoUnitario - quadro1$CustoUnitario) * quadro1$Quantidade
faturamento_vendedor <- tapply(quadro1$Faturamento, quadro1$Vendedor, sum)
barplot(faturamento_vendedor,
main = "Faturamento total por vendedor",
xlab = "Vendedor",
ylab = "Faturamento (R$)",
col = "blue")
print(quadro1)
print(faturamento_vendedor)
set.seed(20)
# ====== b) Criar vetores base ======
vendedores <- c("Ana", "Flavia", "Pedro", "Mariana")
# Cada vendedor aparece 30 vezes (um por dia, durante 30 dias)
# Mas queremos repetir o ciclo de vendedores em blocos de 4 por dia
vendedor <- rep(vendedores, times = 30)
# Criar vetor de dias — 30 dias, cada dia com 4 vendedores
dias <- rep(1:30, each = 4)
# ====== c) Produtos ======
produtos <- c("calçaFlaire", "calçaSkinny", "vestido", "blusa",
"manta", "saia", "casaco", "meia")
# Atribuir produtos de forma aleatória
produto_vendido <- sample(produtos, size = 30 * 4, replace = TRUE)
# ====== d) Quantidades de vendas entre 0 e 5 ======
quantidade <- sample(0:5, size = 30 * 4, replace = TRUE)
# ====== e) Criar o data frame final ======
vendas <- data.frame(
Dia = dias,
Vendedor = vendedor,
Produto = produto_vendido,
Quantidade = quantidade
)
# Visualizar as 10 primeiras linhas
head(vendas, 10)
Entrada: x <- c(1, 3, 8, 2, 1, 3)
x <- c(1, 3, 8, 2, 1, 3)
soma_acumulada <- function(x) {
# Verifica se o vetor é numérico
if (!is.numeric(x)) {
stop("Erro: o vetor deve conter apenas números.")
}
# Cria um vetor vazio para armazenar as somas
resultado <- numeric(length(x))
# Percorre o vetor somando acumuladamente
soma <- 0
for (i in 1:length(x)) {
soma <- soma + x[i]
resultado[i] <- soma
}
return(resultado)
}
soma_acumulada(x)
setwd("C:\Users\ladin\Downloads\SPTECH\2025.2\Python-UpFinity")
setwd("Users\ladin\Downloads\SPTECH\2025.2\Python-UpFinity")
setwd("C:\Users\ladin\Downloads\SPTECH\2025.2\Python-UpFinity")
/
setwd("C:\Downloads\SPTECH\2025.2\Python-UpFinity")
setwd("~\C:\Users\ladin\Downloads\SPTECH\2025.2\Python-UpFinity")
getwd()
setwd("C:/Users/ladin/Downloads/SPTECH\2025.2/Python-UpFinity")
setwd("C:/Users/ladin/Downloads/SPTECH/2025.2")
setwd("C:/Users/ladin/Downloads/SPTECH/2025.2/Python-UpFinity")
df_capturas <- read.csv("capturas.csv")
is.data.frame(df_capturas)
media_cpu <- mean(df_capturas$cpu)
media_ram <- mean(df_capturas$ram)
media_disco <- mean(df_capturas$disco)
mediana_cpu <- mean(df_capturas$cpu)
mediana_ram <- mean(df_capturas$ram)
mediana_disco <- mean(df_capturas$disco)
desvio_cpu <- sd(df_capturas$cpu)
desvio_ram <- sd(df_capturas$ram)
desvio_disco <- sd(df_capturas$disco)
alerta_moderado_cpu <- round(media_cpu + desvio_cpu, 2)
alerta_grave_cpu <- round(media_cpu + 2 * desvio_cpu, 2)
alerta_moderado_ram <- round(media_ram + desvio_ram, 2)
alerta_grave_ram <- round(media_ram + 2 * desvio_ram, 2)
alerta_moderado_disco <- round(media_disco + desvio_disco, 2)
alerta_grave_disco <- round(media_disco + 2 * desvio_disco, 2)
print("Alerta moderado para CPU: ")
print(alerta_moderado_cpu)
print("Alerta grave para CPU: ")
print(alerta_grave_cpu)
print("Alerta moderado para RAM: ")
print(alerta_moderado_ram)
print("Alerta grave para RAM: ")
print(alerta_grave_ram)
print("Alerta moderado para Disco: ")
print(alerta_moderado_disco)
print("Alerta grave para Disco: ")
print(alerta_grave_disco)
df_capturas <- read.csv("capturas.csv")
is.data.frame(df_capturas)
media_cpu <- mean(df_capturas$cpu)
media_ram <- mean(df_capturas$ram)
media_disco <- mean(df_capturas$disco)
mediana_cpu <- mean(df_capturas$cpu)
mediana_ram <- mean(df_capturas$ram)
mediana_disco <- mean(df_capturas$disco)
desvio_cpu <- sd(df_capturas$cpu)
desvio_ram <- sd(df_capturas$ram)
desvio_disco <- sd(df_capturas$disco)
alerta_moderado_cpu <- round(media_cpu + desvio_cpu, 2)
alerta_grave_cpu <- round(media_cpu + 2 * desvio_cpu, 2)
alerta_moderado_ram <- round(media_ram + desvio_ram, 2)
alerta_grave_ram <- round(media_ram + 2 * desvio_ram, 2)
alerta_moderado_disco <- round(media_disco + desvio_disco, 2)
alerta_grave_disco <- round(media_disco + 2 * desvio_disco, 2)
print("Alerta moderado para CPU: ")
print(alerta_moderado_cpu)
print("Alerta grave para CPU: ")
print(alerta_grave_cpu)
print("Alerta moderado para RAM: ")
print(alerta_moderado_ram)
print("Alerta grave para RAM: ")
print(alerta_grave_ram)
print("Alerta moderado para Disco: ")
print(alerta_moderado_disco)
print("Alerta grave para Disco: ")
print(alerta_grave_disco)
View(df_capturas)
View(df_capturas)
setwd("C:/Users/ladin/Downloads/SPTECH/2025.2/Python-UpFinity")
getwd()
df_capturas <- read.csv("capturas.csv")
is.data.frame(df_capturas)
media_cpu <- mean(df_capturas$cpu)
media_ram <- mean(df_capturas$ram)
media_disco <- mean(df_capturas$disco)
mediana_cpu <- mean(df_capturas$cpu)
mediana_ram <- mean(df_capturas$ram)
mediana_disco <- mean(df_capturas$disco)
desvio_cpu <- sd(df_capturas$cpu)
desvio_ram <- sd(df_capturas$ram)
desvio_disco <- sd(df_capturas$disco)
alerta_moderado_cpu <- round(media_cpu + desvio_cpu, 2)
alerta_grave_cpu <- round(media_cpu + 2 * desvio_cpu, 2)
alerta_moderado_ram <- round(media_ram + desvio_ram, 2)
alerta_grave_ram <- round(media_ram + 2 * desvio_ram, 2)
alerta_moderado_disco <- round(media_disco + desvio_disco, 2)
alerta_grave_disco <- round(media_disco + 2 * desvio_disco, 2)
print("Alerta moderado para CPU: ")
print(alerta_moderado_cpu)
print("Alerta grave para CPU: ")
print(alerta_grave_cpu)
print("Alerta moderado para RAM: ")
print(alerta_moderado_ram)
print("Alerta grave para RAM: ")
print(alerta_grave_ram)
print("Alerta moderado para Disco: ")
print(alerta_moderado_disco)
print("Alerta grave para Disco: ")
print(alerta_grave_disco)
